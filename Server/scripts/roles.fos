#include "_macros.fos"
#define MAX_BUMS_COUNT ( 10 )
#define MAX_COPS_COUNT ( 3 )
#define MAX_SHERIFF_COUNT ( 1 )
#define MAX_THUGS_COUNT   ( 5 )
#define MAX_DOCTORS_COUNT ( 1 )
#define MAX_CARAVANERS_COUNT ( 1 )
#define MAX_BANKIR_COUNT     ( 1 )
#define MAX_PEASANTS_COUNT   ( 5 )
#define MAX_BARMAN_COUNT   ( 1 )
#define MAX_NCR_CAP_COUN   ( 1 )
#define MAX_NCR_COUNT      ( 2 )


#define ROLES_COUNT ( 1 )

class Role{
	string name;
	string description;
	int id;
	int maxCount;
	
	Role(string@ name, string@ description, uint id, uint maxCount){
		this.name = name;
		this.description = description;
		this.id = id;
		this.maxCount = maxCount;
	}
}

class RolesEngine{
	Role[] roles;
	
	RolesEngine(){
		initRoles();
	}
	
	void initRoles(){
		roles.insertLast(Role("Бомж", "Вы бездомный, пропащая душа на задворках жизни.", ROLE_BUM, MAX_BUMS_COUNT));
		roles.insertLast(Role("Полицейский", "Служить и защищать, или нет...", ROLE_COP, MAX_COPS_COUNT));
		roles.insertLast(Role("Шериф", "Вы закон в этом городе, все будут либо любить вас, либо ненавидеть.", ROLE_SHERIFF, MAX_SHERIFF_COUNT));
		roles.insertLast(Role("Бандит", "Грабить честных людей, воровать, избивать бомжей, вот ваша жизнь.", ROLE_THUG, MAX_THUGS_COUNT));
		roles.insertLast(Role("Доктор", "Однажды вы дали клятву гиппопотама, или нет, в любом случае вы единственный человек в городе разбирающийся в медицине.", ROLE_DOCTOR, MAX_DOCTORS_COUNT));
		roles.insertLast(Role("Караванщик", "Продать дороже, купить дешевле. Продать умирающему воду, вот ваши цели в жизни.", ROLE_CARAVAN_OWNER, MAX_CARAVANERS_COUNT));
		roles.insertLast(Role("Банкир", "Займ под залог жены, тысяча процентов годовых, это ваш способ вести бизнес. Или нет.", ROLE_BANKIR, MAX_BANKIR_COUNT));
		roles.insertLast(Role("Житель города", "Вы обычный простофиля этого сраного городка.", ROLE_PEASANT, MAX_PEASANTS_COUNT));
		roles.insertLast(Role("Бармен", "Разливать зеленого змия по стаканам и выслушивать скучные истории клиентов, вот ваша работа.", ROLE_BARMAN, MAX_BARMAN_COUNT));
		roles.insertLast(Role("Капитан НКР", "За какие-то грехи вас сослали в эту глушь охранять железнодорожный вокзал. Сделайте всё возможное, чтобы Республика не ударила в грязь лицом.", ROLE_NCR_CAPTAIN, MAX_NCR_CAP_COUN));
		roles.insertLast(Role("Солдат НКР", "Вы тут в составе небольшого взвода на охране стратегического объекта. Постарайтесь не сойти с ума от скуки и помните, что у вас есть командир.", ROLE_NCR_SOLDIER, MAX_NCR_COUNT));
	}
	
	Role[] getAllRoles(){
		return roles;
	}
	
	uint getRolesCount(){
		return roles.length();
	}
	
	Role getRoleById(int id)
	{
		Role role;
		for(uint i = 0; i < roles.length; i++){
			if(roles[i].id == id){
				role = roles[i];
			}
		}
		return role;
	}
	
	string@ getRoleNameById(int id)
	{
		Role role;
		for(uint i = 0; i < roles.length; i++){
			if(roles[i].id == id){
				role = roles[i];
			}
		}
		return role.name;
	}
	
	#ifdef __SERVER
	void applyRole(Critter@ cr)
	{
		uint roleId = cr.Param[CR_CURRENT_ROLE];
		if(roleId == 0){
			Log("Incorrect Role: " + GetPlayerName(cr.Id) + " " + cr.Id);
			return;
		}
		
		switch(roleId){
			case ROLE_BUM:
				becomeBum(cr);
				break;
			
			case ROLE_COP:
				becomeCop(cr);
				break;
				
			case ROLE_SHERIFF:
				becomeSheriff(cr);
				break;
			
			case ROLE_THUG:
				becomeThug(cr);
				break;
			
			case ROLE_DOCTOR:
				becomeDoctor(cr);
				break;
			
			case ROLE_CARAVAN_OWNER:
				becomeCaravanOwner(cr);
				break;
				
			case ROLE_BANKIR:
				becomeBankir(cr);
				break;
			
			case ROLE_PEASANT:
				becomePeasant(cr);
				break;
			
			case ROLE_BARMAN:
				becomeBarman(cr);
				break;
				
			case ROLE_NCR_CAPTAIN:
				becomeNcrCap(cr);
				break;

			case ROLE_NCR_SOLDIER:
				becomeNcrGrunt(cr);
				break;

			default:
				Log("Incorrect RoleId: " + roleId + " " + GetPlayerName(cr.Id) + " " + cr.Id);
				break;		
		}
		
		if(Random(0, 2) == 0){
			cr.AddItem(PID_LIGHTER, 1);
			cr.AddItem(PID_CIGARETTES, 1);
		}
		
		Item@ docs = cr.AddItem(PID_DOCUMENTS, 1);
		
		if(roleId != ROLE_THUG){
			docs.SetLexems("Документы на имя: " + GetPlayerName(cr.Id) + " " + getRoleNameById(roleId));
		}else{
			docs.SetLexems("Документы на имя: " + GetPlayerName(cr.Id) + " " + getRoleNameById(ROLE_PEASANT));
		}

		addRandomStuff(cr);
	}
	
	void addRandomStuff(Critter@ cr)
	{
		int[] pids = {
			PID_FRAG_GRENADE,
			PID_DECK_OF_CARDS,
			PID_DICE,
			PID_COSMETIC_CASE,
			PID_RED_CONDOM,
			PID_GREEN_CONDOM,
			PID_BLUE_CONDOM,
			PID_CHEEZY_POOFS,
			PID_WATER_FLASK,
			PID_BALL_GAG,
			PID_FLOWER,
			PID_SHOVEL,
			PID_WELDING,
			PID_DOG_TAGS,
			PID_RADIO,
			PID_KNIFE,
			PID_LIL_JESUS_WEAPON,
			PID_SHIV,
			PID_SPEAR,
			PID_FLARE
        };
		
		uint count = Random(1, 3);
		for(uint i = 0; i < count; i++)
		{
			cr.AddItem(pids[Random(0, pids.length() - 1)], 1);
		}
	}
	
	void becomeBum(Critter@ cr){
	
		if(Random(0, 100) == 0){
			becomeHoboGod(cr);
			return;
		}
	
		cr.ParamBase[ST_STRENGTH] = 4 + Random( -2, 2);
		cr.ParamBase[ST_PERCEPTION] = 4 + Random( -2, 2);
		cr.ParamBase[ST_ENDURANCE] = 4; + Random( -2, 2);
		cr.ParamBase[ST_CHARISMA] = 4 + Random( -2, 2);
		cr.ParamBase[ST_INTELLECT] = 2 + Random( -1, 1);
		cr.ParamBase[ST_AGILITY] = 3 + Random( -2, 2);
		cr.ParamBase[ST_LUCK] = 8 + Random( -2, 2);
		cr.ParamBase[ST_HEALING_RATE] = 25;
		cr.ParamBase[SK_UNARMED] = 100 + Random( -40, 40);
		cr.ParamBase[SK_THROWING] = 100 + Random( -40, 40);
		cr.ParamBase[SK_SPEECH] = 200 + Random( -40, 40);
		cr.ParamBase[CR_BREAKTIME] = 1600;
		cr.ParamBase[PE_ALCOHOL_RAISED_HP] = 1;
		
		if(Random(0, 1) == 0){
			Item@ armor = cr.AddItem(PID_SANDROBE, 1);
			cr.MoveItem(armor.Id, 1, SLOT_ARMOR);
		}
		
		cr.AddItem(PID_ROT_GUT, Random(0, 2));
		cr.AddItem(PID_REAL_BOTTLE_CAPS, Random(15, 45));
	
	}
	
	void becomeHoboGod(Critter@ cr){

		cr.ParamBase[ST_STRENGTH] = 9 + Random( -2, 2);
		cr.ParamBase[ST_PERCEPTION] = 9 + Random( -2, 2);
		cr.ParamBase[ST_ENDURANCE] = 9; + Random( -2, 2);
		cr.ParamBase[ST_CHARISMA] = 9 + Random( -2, 2);
		cr.ParamBase[ST_INTELLECT] = 9 + Random( -1, 1);
		cr.ParamBase[ST_AGILITY] = 9 + Random( -2, 2);
		cr.ParamBase[ST_LUCK] = 9 + Random( -2, 2);
		cr.ParamBase[ST_HEALING_RATE] = 25;
		cr.ParamBase[SK_UNARMED] = 220 + Random( -40, 40);
		cr.ParamBase[SK_SMALL_GUNS] = 220 + Random( -40, 40);
		cr.ParamBase[SK_FIRST_AID] = 220 + Random( -40, 40);
		cr.ParamBase[SK_DOCTOR] = 220 + Random( -40, 40);

		cr.ParamBase[SK_THROWING] = 200 + Random( -40, 40);
		cr.ParamBase[SK_SPEECH] = 200 + Random( -40, 40);
		cr.ParamBase[CR_BREAKTIME] = 700;
		
		cr.AddItem(PID_ROT_GUT, Random(10, 20));

		cr.Say(SAY_NETMSG, "Спустя годы страданий вам удалось эволюционировать, теперь вы КОРОЛЬ БОМЖЕЙ");
	}
	
	void becomeCop(Critter@ cr){
		cr.ParamBase[ST_STRENGTH] = 5 + Random( -2, 2);
		cr.ParamBase[ST_PERCEPTION] = 5 + Random( -1, 3);
		cr.ParamBase[ST_ENDURANCE] = 6 + Random( -2, 2);
		cr.ParamBase[ST_CHARISMA] = 5 + Random( -2, 2);
		cr.ParamBase[ST_INTELLECT] = 5 + Random( -1, 3);
		cr.ParamBase[ST_AGILITY] = 6 + Random( -2, 2);
		cr.ParamBase[ST_LUCK] = 5 + Random( -2, 2);
		cr.ParamBase[ST_HEALING_RATE] = 10;
		cr.ParamBase[SK_SMALL_GUNS] = 120 + Random( -40, 40);
		cr.ParamBase[SK_FIRST_AID] = 100 + Random( -40, 40);
		cr.ParamBase[SK_DOCTOR] = 60 + Random( -40, 40);

		cr.ParamBase[SK_UNARMED] = 150 + Random( -40, 40);
		cr.ParamBase[SK_THROWING] = 120 + Random( -40, 40);
		cr.ParamBase[ CR_BREAKTIME ] = 1200;

		cr.AddItem(PID_BOTTLE_CAPS, Random(15, 45));
		cr.AddItem(PID_POLICE_BAT, 1);	
		cr.AddItem(PID_RADIO, 1);
		cr.AddItem(PID_HANDCUFFS, 1);

		switch(Random(0, 3)){
			case 0:
			cr.AddItem(PID_45_MAG, Random(1, 2));
			cr.AddItem(PID_COLT_1911, 1);	
			break;

			case 1:
			cr.AddItem(PID_SMALL_ENERGY_CELL, Random(15, 20));
			cr.AddItem(PID_WATTZ_LAZER_PISTOL, 1);	
			break;
			
			case 2:
			cr.AddItem(PID_357_AMMO, Random(10, 20));
			cr.AddItem(PID_COLT_PYTHON, 1);	
			break;
			
			case 3:
			cr.AddItem(PID_22_AMMO, Random(8, 12));
			cr.AddItem(PID_WIDOWMAKER, 1);	
			break;
			
		
			default:
			break;
		}
		
		Item@ key = cr.AddItem(PID_KEY, 1);
		key.LockerId = ROLE_COP;
		key.SetLexems("Ключ от камер.");

		
		Item@ armor = cr.AddItem(PID_BLUE_LEATHER, 1);
		cr.MoveItem(armor.Id, 1, SLOT_ARMOR);
		
	}
	
	void becomeSheriff(Critter@ cr){
	
		cr.ParamBase[ST_STRENGTH] = 7 + Random( -2, 2);
		cr.ParamBase[ST_PERCEPTION] = 9 + Random( -2, 2);
		cr.ParamBase[ST_ENDURANCE] = 7 + Random( -2, 2);
		cr.ParamBase[ST_CHARISMA] = 6 + Random( -2, 2);
		cr.ParamBase[ST_INTELLECT] = 6 + Random( -2, 2);
		cr.ParamBase[ST_AGILITY] = 9 + Random( -2, 2);
		cr.ParamBase[ST_LUCK] = 8 + Random( -2, 2);
		cr.ParamBase[ST_HEALING_RATE] = 10;
		cr.ParamBase[SK_SMALL_GUNS] = 180 + Random( -40, 40);
		cr.ParamBase[SK_FIRST_AID] = 100 + Random( -40, 40);
		cr.ParamBase[SK_DOCTOR] = 60 + Random( -40, 40);

		cr.ParamBase[SK_UNARMED] = 180 + Random( -40, 40);
		cr.ParamBase[SK_THROWING] = 140 + Random( -40, 40);
		cr.ParamBase[ CR_BREAKTIME ] = 800;
		
		cr.AddItem(PID_BOTTLE_CAPS, Random(150, 450));
		cr.AddItem(PID_223_SAWED_OFF, 1);
		cr.AddItem(PID_223_AMMO, Random(12, 32));
		cr.AddItem(PID_RADIO, 1);
		cr.AddItem(PID_HANDCUFFS, 1);
		cr.AddItem(PID_POLICE_BAT, 1);	

		
		Item@ key = cr.AddItem(PID_KEY, 1);
		key.LockerId = ROLE_COP;
		key.SetLexems("Ключ от камер.");


		
		Item@ armor = cr.AddItem(PID_BLUE_CA, 1);
		cr.MoveItem(armor.Id, 1, SLOT_ARMOR);
	}
	
	void becomeThug(Critter@ cr){
	
		cr.ParamBase[ST_STRENGTH] = 6 + Random( -4, 4);
		cr.ParamBase[ST_PERCEPTION] = 5 + Random( -2, 2);
		cr.ParamBase[ST_ENDURANCE] = 7 + Random( -3, 3);
		cr.ParamBase[ST_CHARISMA] = 3 + Random( -2, 2);
		cr.ParamBase[ST_INTELLECT] = 5 + Random( -2, 2);
		cr.ParamBase[ST_AGILITY] = 4 + Random( -2, 2);
		cr.ParamBase[ST_LUCK] = 4 + Random( -2, 2);
		cr.ParamBase[ST_HEALING_RATE] = 10;
		cr.ParamBase[SK_SMALL_GUNS] = 100 + Random( -40, 40);
		cr.ParamBase[SK_UNARMED] = 120 + Random( -40, 40);
		cr.ParamBase[SK_THROWING] = 60 + Random( -40, 40);
		cr.ParamBase[ CR_BREAKTIME ] = 1100;
		
		cr.AddItem(PID_BOTTLE_CAPS, Random(15, 45));
		cr.AddItem(PID_ROT_GUT, Random(0, 1));
		if(Random(0, 1) == 0){
			cr.AddItem(PID_RUSTY_KNIFE, 1);		
		}else{
			cr.AddItem(PID_SWITCHBLADE, 1);
		}

		switch(Random(0, 7)){
			case 0:
			cr.AddItem(PID_45_MAG, Random(1, 2));
			cr.AddItem(PID_COLT_1911, 1);	
			break;

			case 1:
			cr.AddItem(PID_SMALL_ENERGY_CELL, Random(15, 20));
			cr.AddItem(PID_WATTZ_LAZER_PISTOL, 1);	
			break;
			
			case 2:
			cr.AddItem(PID_357_AMMO, Random(10, 20));
			cr.AddItem(PID_COLT_PYTHON, 1);	
			break;
			
			case 3:
			cr.AddItem(PID_22_AMMO, Random(8, 12));
			cr.AddItem(PID_WIDOWMAKER, 1);	
			break;
			
			case 4:
			cr.AddItem(PID_223_MAGAZINE, Random(1, 2));
			cr.AddItem(PID_COLT_RANGEMASTER, 1);	
			break;
			
			case 5:
			cr.AddItem(PID_303_AMMO, Random(10, 20));
			cr.AddItem(PID_LEE_ENFIELD, 1);	
			break;
		
			default:
			break;
		}
		cr.AddItem(PID_SANDROBE, 1);
				
		int type = Random(0, 1);
		if(type == 0){
			cr.ParamBase[SK_LOCKPICK] = Random(120, 220);
			cr.AddItem(PID_LOCKPICKS, 1);
		}else if(type == 1){
			cr.ParamBase[SK_STEAL] = Random(120, 220);
		}
		
		uint[] armorPids = {PID_LEATHER_JACKET, PID_LEATHER_ARMOR, PID_CURED_LEATHER_ARMOR, PID_JUMPSUIT};
		
		uint armorPid = armorPids[Random(0, armorPids.length() - 1)];
		
		Item@ armor = cr.AddItem(armorPid, 1);
		cr.MoveItem(armor.Id, 1, SLOT_ARMOR);
	}
	
	void becomeDoctor(Critter@ cr){
		cr.ParamBase[ST_STRENGTH] = 3 + Random( -2, 2);
		cr.ParamBase[ST_PERCEPTION] = 6 + Random( -2, 2);
		cr.ParamBase[ST_ENDURANCE] = 4 + Random( -3, 3);
		cr.ParamBase[ST_CHARISMA] = 6 + Random( -2, 2);
		cr.ParamBase[ST_INTELLECT] = 7 + Random( -2, 2);
		cr.ParamBase[ST_AGILITY] = 4 + Random( -2, 2);
		cr.ParamBase[ST_LUCK] = 6 + Random( -2, 2);
		cr.ParamBase[ST_HEALING_RATE] = 10;
		cr.ParamBase[SK_SMALL_GUNS] = 60 + Random( -40, 40);
		cr.ParamBase[SK_UNARMED] = 40 + Random( -40, 40);
		cr.ParamBase[SK_THROWING] = 60 + Random( -40, 40);
		cr.ParamBase[SK_DOCTOR] = 160 + Random( -40, 40);
		cr.ParamBase[SK_FIRST_AID] = 160 + Random( -40, 40);

		cr.ParamBase[ CR_BREAKTIME ] = 1200;
		
		cr.AddItem(PID_BOTTLE_CAPS, Random(15, 45));
		Item@ key = cr.AddItem(PID_KEY, 1);
		key.SetLexems("Ключ от больницы.");

		key.LockerId = ROLE_DOCTOR;

		Item@ armor = cr.AddItem(PID_LEATHER_JACKET, 1);
		cr.MoveItem(armor.Id, 1, SLOT_ARMOR);
	}
	
	void becomeCaravanOwner(Critter@ cr){
		cr.ParamBase[ST_STRENGTH] = 5 + Random( -2, 2);
		cr.ParamBase[ST_PERCEPTION] = 5 + Random( -2, 2);
		cr.ParamBase[ST_ENDURANCE] = 5 + Random( -3, 3);
		cr.ParamBase[ST_CHARISMA] = 6 + Random( -2, 2);
		cr.ParamBase[ST_INTELLECT] = 6 + Random( -1, 2);
		cr.ParamBase[ST_AGILITY] = 5 + Random( -2, 2);
		cr.ParamBase[ST_LUCK] = 6 + Random( -2, 2);
		cr.ParamBase[ST_HEALING_RATE] = 10;
		cr.ParamBase[SK_SMALL_GUNS] = 120 + Random( -40, 40);
		cr.ParamBase[SK_UNARMED] = 60 + Random( -40, 40);
		cr.ParamBase[SK_THROWING] = 60 + Random( -40, 40);
		cr.ParamBase[SK_BARTER] = 140 + Random( -40, 40);
		
		cr.ParamBase[ CR_BREAKTIME ] = 1200;
		
		cr.AddItem(PID_BOTTLE_CAPS, Random(150, 450));
		cr.AddItem(PID_WIDOWMAKER, 1);
		cr.AddItem(PID_22_AMMO, Random(6, 16));
		Item@ key = cr.AddItem(PID_KEY, 1);
		key.SetLexems("Ключ от офиса караванщика.");
		key.LockerId = ROLE_CARAVAN_OWNER;

		uint[] armorPids = {PID_LEATHER_JACKET, PID_LEATHER_ARMOR, PID_CURED_LEATHER_ARMOR, PID_SANDROBE, PID_LEATHER_ARMOR_MK_II, PID_CHITIN_ARMOR};

		Item@ armor = cr.AddItem(armorPids[Random(0, armorPids.length() - 1)], 1);
		cr.MoveItem(armor.Id, 1, SLOT_ARMOR);
	}
	
	void becomeBankir(Critter@ cr){
		cr.ParamBase[ST_STRENGTH] = 3 + Random( -2, 2);
		cr.ParamBase[ST_PERCEPTION] = 6 + Random( -2, 2);
		cr.ParamBase[ST_ENDURANCE] = 4 + Random( -3, 3);
		cr.ParamBase[ST_CHARISMA] = 6 + Random( -2, 2);
		cr.ParamBase[ST_INTELLECT] = 7 + Random( -2, 2);
		cr.ParamBase[ST_AGILITY] = 4 + Random( -2, 2);
		cr.ParamBase[ST_LUCK] = 6 + Random( -2, 2);
		cr.ParamBase[ST_HEALING_RATE] = 10;
		cr.ParamBase[SK_SMALL_GUNS] = 60 + Random( -40, 40);
		cr.ParamBase[SK_UNARMED] = 40 + Random( -40, 40);
		cr.ParamBase[SK_THROWING] = 60 + Random( -40, 40);
		cr.ParamBase[SK_BARTER] = 100 + Random( -40, 40);

		cr.ParamBase[ CR_BREAKTIME ] = 1200;

		cr.AddItem(PID_BOTTLE_CAPS, Random(15, 45));
		
		Item@ key = cr.AddItem(PID_KEY, 1);
		key.LockerId = ROLE_BANKIR;

		uint[] armorPids = {PID_LEATHER_JACKET, PID_LEATHER_ARMOR, PID_CURED_LEATHER_ARMOR, PID_SANDROBE, PID_LEATHER_ARMOR_MK_II, PID_CHITIN_ARMOR};

		Item@ armor = cr.AddItem(armorPids[Random(0, armorPids.length() - 1)], 1);
		cr.MoveItem(armor.Id, 1, SLOT_ARMOR);
	}
	
	void becomePeasant(Critter@ cr)
	{
		cr.ParamBase[ST_STRENGTH] = 5 + Random( -3, 4);
		cr.ParamBase[ST_PERCEPTION] = 5 + Random( -3, 4);
		cr.ParamBase[ST_ENDURANCE] = 5 + Random( -3, 4);
		cr.ParamBase[ST_CHARISMA] = 5 + Random( -3, 4);
		cr.ParamBase[ST_INTELLECT] = 5 + Random( 0, 4);
		cr.ParamBase[ST_AGILITY] = 5 + Random( -3, 4);
		cr.ParamBase[ST_LUCK] = 5 + Random( -3, 4);
		cr.ParamBase[ST_HEALING_RATE] = 10;
		cr.ParamBase[SK_SMALL_GUNS] = 80 + Random( -70, 70);
		cr.ParamBase[SK_UNARMED] = 80 + Random( -60, 60);
		cr.ParamBase[SK_THROWING] = 80 + Random( -60, 60);
		cr.ParamBase[SK_BARTER] = 100 + Random( -40, 40);
		cr.ParamBase[SK_DOCTOR] = 80 + Random( -40, 40);
		cr.ParamBase[SK_LOCKPICK] = 80 + Random( -40, 40);
		cr.ParamBase[SK_FIRST_AID] = 80 + Random( -40, 40);

		cr.ParamBase[ CR_BREAKTIME ] = 1200;
		
		switch(Random(0, 7)){
			case 0:
			cr.AddItem(PID_45_MAG, Random(1, 2));
			cr.AddItem(PID_COLT_1911, 1);	
			break;

			case 1:
			cr.AddItem(PID_SMALL_ENERGY_CELL, Random(15, 20));
			cr.AddItem(PID_WATTZ_LAZER_PISTOL, 1);	
			break;
			
			case 2:
			cr.AddItem(PID_357_AMMO, Random(10, 20));
			cr.AddItem(PID_COLT_PYTHON, 1);	
			break;
			
			case 3:
			cr.AddItem(PID_22_AMMO, Random(8, 12));
			cr.AddItem(PID_WIDOWMAKER, 1);	
			break;
			
			case 4:
			cr.AddItem(PID_223_MAGAZINE, Random(1, 2));
			cr.AddItem(PID_COLT_RANGEMASTER, 1);	
			break;
			
			case 5:
			cr.AddItem(PID_303_AMMO, Random(10, 20));
			cr.AddItem(PID_LEE_ENFIELD, 1);	
			break;
		
			default:
			break;
		}
		
		cr.AddItem(PID_BOTTLE_CAPS, Random(15, 450));
		uint[] armorPids = {PID_LEATHER_JACKET, PID_LEATHER_ARMOR, PID_CURED_LEATHER_ARMOR, PID_SANDROBE, PID_LEATHER_ARMOR_MK_II, PID_CHITIN_ARMOR};

		Item@ armor = cr.AddItem(armorPids[Random(0, armorPids.length() - 1)], 1);
		cr.MoveItem(armor.Id, 1, SLOT_ARMOR);
	}
	
	void becomeBarman(Critter@ cr)
	{
		cr.ParamBase[ST_STRENGTH] = 5 + Random( -3, 4);
		cr.ParamBase[ST_PERCEPTION] = 5 + Random( -3, 4);
		cr.ParamBase[ST_ENDURANCE] = 5 + Random( -3, 4);
		cr.ParamBase[ST_CHARISMA] = 5 + Random( -3, 4);
		cr.ParamBase[ST_INTELLECT] = 5 + Random( 0, 4);
		cr.ParamBase[ST_AGILITY] = 5 + Random( -3, 4);
		cr.ParamBase[ST_LUCK] = 5 + Random( -3, 4);
		cr.ParamBase[ST_HEALING_RATE] = 10;
		cr.ParamBase[SK_SMALL_GUNS] = 120 + Random( -40, 40);
		cr.ParamBase[SK_UNARMED] = 100 + Random( -40, 40);
		cr.ParamBase[SK_THROWING] = 80 + Random( -60, 60);
		cr.ParamBase[SK_BARTER] = 100 + Random( -40, 40);
		cr.ParamBase[SK_FIRST_AID] = 80 + Random( -40, 40);

		cr.ParamBase[ CR_BREAKTIME ] = 1200;
		Item@ key = cr.AddItem(PID_KEY, 1);
		key.LockerId = ROLE_BARMAN;

		cr.AddItem(PID_BOTTLE_CAPS, Random(15, 450));
		uint[] armorPids = {PID_LEATHER_JACKET, PID_LEATHER_ARMOR, PID_CURED_LEATHER_ARMOR, PID_SANDROBE, PID_LEATHER_ARMOR_MK_II, PID_CHITIN_ARMOR};

		Item@ armor = cr.AddItem(armorPids[Random(0, armorPids.length() - 1)], 1);
		cr.MoveItem(armor.Id, 1, SLOT_ARMOR);
	}
	
	void becomeNcrCap(Critter@ cr){
	
		cr.ParamBase[ST_STRENGTH] = 8 + Random( -2, 2);
		cr.ParamBase[ST_PERCEPTION] = 9 + Random( -2, 2);
		cr.ParamBase[ST_ENDURANCE] = 9 + Random( -2, 2);
		cr.ParamBase[ST_CHARISMA] = 6 + Random( -2, 2);
		cr.ParamBase[ST_INTELLECT] = 6 + Random( -1, 2);
		cr.ParamBase[ST_AGILITY] = 6 + Random( -2, 2);
		cr.ParamBase[ST_LUCK] = 6 + Random( -2, 2);
		cr.ParamBase[ST_HEALING_RATE] = 10;
		cr.ParamBase[SK_SMALL_GUNS] = 220 + Random( -40, 40);
		cr.ParamBase[SK_FIRST_AID] = 100 + Random( -40, 40);
		cr.ParamBase[SK_DOCTOR] = 100 + Random( -40, 40);

		cr.ParamBase[SK_UNARMED] = 180 + Random( -40, 40);
		cr.ParamBase[SK_THROWING] = 140 + Random( -40, 40);
		cr.ParamBase[ CR_BREAKTIME ] = 1000;
		
		cr.AddItem(PID_BOTTLE_CAPS, Random(150, 450));
		cr.AddItem(PID_BAR, 1);
		cr.AddItem(PID_303_MAG, Random(3, 4));
		cr.AddItem(PID_RADIO, 1);
		cr.AddItem(PID_HANDCUFFS, 1);
		cr.AddItem(PID_COMBAT_KNIFE, 1);	
		
		cr.AddItem(PID_45_MAG, Random(1, 2));
		cr.AddItem(PID_COLT_1911, 1);	

		
		Item@ key = cr.AddItem(PID_KEY, 1);
		key.LockerId = ROLE_NCR_CAPTAIN;
		key.SetLexems("Ключ от кабинета.");


		
		Item@ armor = cr.AddItem(PID_NCR_CA, 1);
		cr.MoveItem(armor.Id, 1, SLOT_ARMOR);
	}
	
	void becomeNcrGrunt(Critter@ cr){
		cr.ParamBase[ST_STRENGTH] = 7 + Random( -2, 2);
		cr.ParamBase[ST_PERCEPTION] = 5 + Random( -1, 3);
		cr.ParamBase[ST_ENDURANCE] = 8 + Random( -2, 2);
		cr.ParamBase[ST_CHARISMA] = 3 + Random( -2, 2);
		cr.ParamBase[ST_INTELLECT] = 5 + Random( -1, 3);
		cr.ParamBase[ST_AGILITY] = 6 + Random( -2, 2);
		cr.ParamBase[ST_LUCK] = 3 + Random( -2, 2);
		cr.ParamBase[ST_HEALING_RATE] = 10;
		cr.ParamBase[SK_SMALL_GUNS] = 160 + Random( -40, 40);
		cr.ParamBase[SK_FIRST_AID] = 60 + Random( -40, 40);
		cr.ParamBase[SK_DOCTOR] = 60 + Random( -40, 40);

		cr.ParamBase[SK_UNARMED] = 180 + Random( -40, 40);
		cr.ParamBase[SK_THROWING] = 120 + Random( -40, 40);
		cr.ParamBase[ CR_BREAKTIME ] = 1200;

		cr.AddItem(PID_BOTTLE_CAPS, Random(150, 300));
		cr.AddItem(PID_COMBAT_KNIFE, 1);	
		cr.AddItem(PID_RADIO, 1);
		cr.AddItem(PID_HANDCUFFS, 1);

		switch(Random(0, 1)){
			case 0:
			cr.AddItem(PID_223_MAGAZINE, Random(1, 2));
			cr.AddItem(PID_COLT_RANGEMASTER, 1);	
			break;
			
			case 1:
			cr.AddItem(PID_303_AMMO, Random(10, 20));
			cr.AddItem(PID_LEE_ENFIELD, 1);	
			break;
			
			default:
			break;
		}

		Item@ armor = cr.AddItem(PID_NCR_CA, 1);
		cr.MoveItem(armor.Id, 1, SLOT_ARMOR);
		
	}
	
	#endif

}